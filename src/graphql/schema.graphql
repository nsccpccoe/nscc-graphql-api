type Query {
  metadata: MetaData!

  # User
  user(userId: ID!): User!

  # Events
  event(eventId: ID!): Event!
  events: [Event!]!

  # Certificates
  certificateById(certificateId: ID!): EventCertificate!
  certificatesByUser(userId: ID!): [EventCertificate!]!
  certificatesByEvent(eventId: ID!): [EventCertificate!]!
}

type Mutation {

  # User
  updateUser(user: UpdateUserInput!): User!
  deleteUser(userId: ID!): Boolean!

  # Events
  createEvent(event: CreateEventInput!): Event!
  updateEvent(event: UpdateEventInput!): Event!
  deleteEvent(eventId: ID!): Boolean!
  register(eventId: ID!): Event!
  unregister(eventId: ID!): Event!

  # Certificate
  createEventCertificate(certificate: CreateEventCertificateInput!): EventCertificate!
  updateEventCertificate(certificate: UpdateEventCertificateInput!): EventCertificate!
  deleteEventCertificate(certificateId: ID!): Boolean!

  #Host
  createHost(host: CreateEventHostInput!): EventHost!
  updateHost(host: UpdateEventHostInput!): EventHost!
  deleteHost(hostId: ID!): Boolean!

  #Sponsor
  createEventSponsor(host: CreateEventSponsorInput!): EventSponsor!
  updateEventSponsor(host: UpdateEventSponsorInput!): EventSponsor!
  deleteEventSponsor(hostId: ID!): Boolean!

  #EventHostHead
  createEventHostHead(head: CreateEventHostHeadInput!): EventHostHead!
  updateEventHostHead(head: UpdateEventHostHeadInput!): EventHostHead!
  deleteEventHostHead(headId: ID!): Boolean!
}

type MetaData {

  "Name of a Server Owner"
  name: StringNonEmpty!

  "API Version"
  version: StringNonEmpty!

  "Last Deployment Time"
  buildAt: StringNonEmpty!

  "Last Deployment Platform"
  platform: StringNonEmpty!
}

type Image {
  light: URL!
  dark: URL!
}

enum LinkTypeEnum {
  _self
  _blank
  _parent
  _top
}

type Link {
  displayText: StringNonEmpty!
  href: URL!
  target: LinkTypeEnum!
}

input LinkInput {
  displayText: StringNonEmpty!
  href: URL!
  target: LinkTypeEnum!
}

type EventSponsor {
  id: ID!
  displayName: StringNonEmpty!
  shortName: StringNonEmpty!
  logo: Image!
  links: [Link!]!
  coverImage: Image!
}

input CreateEventSponsorInput {
  id: ID!
  displayName: StringNonEmpty!
  shortName: StringNonEmpty!
  # logo: Image!
  links: [LinkInput!]!
  # coverImage: Image!
}

input UpdateEventSponsorInput {
  id: ID!
  displayName: StringNonEmpty
  shortName: StringNonEmpty
  # logo: Image!
  links: [LinkInput!]
  # coverImage: Image!
}

type EventHost {
  id: ID!
  displayName: StringNonEmpty!
  shortName: StringNonEmpty!
  logo: Image!
  coverImage: Image!
  links: [Link!]!
}

input CreateEventHostInput {
  displayName: StringNonEmpty!
  shortName: StringNonEmpty!
  # logo: Image!
  # coverImage: Image!
  links: [LinkInput!]!
}

input UpdateEventHostInput {
  id: ID!
  displayName: StringNonEmpty
  shortName: StringNonEmpty
  # logo: Image!
  # coverImage: Image!
  links: [LinkInput!]
}

enum Gender {
  Male
  Female
  Other
}

type User {
  id: ID!
  email: Email!
  displayName: StringNonEmpty
  phoneNumber: StringNonEmpty
  gender: Gender
  dob: DatePast
  photoURL: URL
  graduationYear: Int
  collegeName: StringNonEmpty
  collegeBranch: StringNonEmpty
  collegeDivision: CharUppercase
  prn: StringNonEmpty
  rollNumber: StringNonEmpty
  links: [Link!]!
  events: [Event]!
  certificates: [EventCertificate!]!
}

input UpdateUserInput {
  id: ID!
  displayName: StringNonEmpty
  phoneNumber: StringNonEmpty
  gender: Gender
  dob: DatePast
  photoURL: URL
  graduationYear: Int
  collegeName: StringNonEmpty
  collegeBranch: StringNonEmpty
  collegeDivision: CharUppercase
  prn: StringNonEmpty
  rollNumber: StringNonEmpty
  links: [LinkInput!]
}

type EventHostHead {
  id: ID!
  displayName: StringNonEmpty!
  description: StringNonEmpty!
  signature: Image!
}

input CreateEventHostHeadInput {
  displayName: StringNonEmpty!
  description: StringNonEmpty!
  # signature: Image!
}

input UpdateEventHostHeadInput {
  id: ID!
  displayName: StringNonEmpty
  description: StringNonEmpty
  # signature: Image!
}

type Event {
  id: ID!
  title: StringNonEmpty!
  subtitle: StringNonEmpty!
  description: StringNonEmpty!
  startAt: Date!
  endAt: Date!
  featured: Boolean!
  coverImage: Image!
  hosts: [EventHost!]!
  sponsors: [EventSponsor!]!
  landingPage: Link!
  registration: Link!
  community: Link!
  registered: Boolean
}

input CreateEventInput {
  title: StringNonEmpty!
  subtitle: StringNonEmpty!
  description: StringNonEmpty!
  startAt: Date!
  endAt: Date!
  featured: Boolean!
  # coverImage: Image!
  hosts: [ID!]!
  sponsors: [ID!]!
  landingPage: LinkInput!
  registration: LinkInput!
  community: LinkInput!
}

input UpdateEventInput {
  id: ID!
  title: StringNonEmpty
  subtitle: StringNonEmpty
  description: StringNonEmpty
  startAt: Date
  endAt: Date
  featured: Boolean
  # coverImage: Image!
  hosts: [ID!]
  sponsors: [ID!]
  landingPage: LinkInput
  registration: LinkInput
  community: LinkInput
}

enum EventCertificateType {
  Achievement
  Participation
  Appreciation
  Completion
}

type EventCertificate {
  id: ID!
  type: EventCertificateType!
  event: Event!
  participant: User!
  signatures: [EventHostHead!]!
  verifyURL: Link!
  downloadURL: Link!
}

input CreateEventCertificateInput {
  type: EventCertificateType!
  eventId: ID!
  participantId: ID!
  description: StringNonEmpty!
}

input UpdateEventCertificateInput {
  id: ID!
  type: EventCertificateType
  eventId: ID
  participantId: ID
  description: StringNonEmpty
}